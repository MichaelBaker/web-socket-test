if (module.platform !== "browser") {
  var Class        = require('../public/class');
  var WebSocket    = require('node-websocket-server');
  var EventEmitter = require('events').EventEmitter;
  var responses    = require('responses');
  var util         = require('util');
}

var Server = Class({
  className     : "Server",
  clients       : {},
  requests      : 0,
  responses     : 0,
  startTime     : new Date().getTime(),
  
  initialize : function() {
    var self = this;
    
    this.webSocket = WebSocket.createServer();
    this.webSocket.addListener('close'      , this.handleClose);
    this.webSocket.addListener('shutdown'   , this.handleShutdown);
    this.webSocket.addListener('connection' , function(connection) {
      self.clients[connection.id] = connection;
      
      connection.on('message' , function(message) {
        self.requests += 1;
        self.simulation.notify(JSON.parse(message));
      });
      
      util.log("Client \033[34m" + connection.id + "\033[30m connected");
      self.sendTo(connection.id , new responses['playerId'](connection.id));
    });
  },
  
  handleClose : function() {
    
  },
  
  handleShutdown : function() {
    
  },
  
  listen : function(port) {
    this.webSocket.listen(port);
    util.log('\033[32mServer started on port ' + port + '\033[30m');
  },
  
  sendToAll : function(message) {
    var self = this;
    
    this.clients.eachAttribute(function(id , client) {
      self.sendTo(client.id , message);
    });
  },
  
  sendToAllExcept : function(id , message) {
    var self = this;
    
    this.clients.eachAttribute(function(clientId , client) {
      if (clientId !== id) {
        self.sendTo(clientId , message);
      }
    });
  },
  
  sendTo : function(id , message) {
    this.responses += 1;
    this.webSocket.send(id , JSON.stringify(message));
  },
  
  reject : function(id , message) {
    this.clients[id].reject(message);
    delete this.clients[id];
  },
  
  requestsPerSecond : function() {
    var secondsRunning = (new Date().getTime() - this.startTime) / 1000;
    return this.requests / secondsRunning;
  },
  
  responsesPerSecond : function() {
    var secondsRunning = (new Date().getTime() - this.startTime) / 1000;
    return this.responses / secondsRunning;
  },
  
  monitorRequestsPerSecond : function() {
    var self            = this;
    var startTime       = new Date().getTime();
    var initialRequests = this.requests;
    
    var func = function() {
      var requests = self.requests - initialRequests;
      var time     = (new Date().getTime() - startTime) /1000;
      
      console.log("Requests per second: " + (requests / time));
    };
    
    this.rqpsIntervalId = setInterval(func , 1000);
  },
  
  crqps : function() {
    return clearInterval(this.rqpsIntervalId);
  },
  
  monitorResponsesPerSecond : function() {
    var self             = this;
    var startTime        = new Date().getTime();
    var initialResponses = this.responses;
    
    var func = function() {
      var responses = self.responses - initialResponses;
      var time     = (new Date().getTime() - startTime) /1000;
      
      console.log("Requests per second: " + (responses / time));
    };
    
    this.rspsIntervalId = setInterval(func , 1000);
  },
  
  crpsp : function() {
    return clearInterval(this.rspsIntervalId);
  }
});

module.exports = Server;