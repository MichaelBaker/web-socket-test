if (module.platform !== "browser") {
  var Class        = require('../public/class');
  var WebSocket    = require('node-websocket-server');
  var EventEmitter = require('events').EventEmitter;
  var responses    = require('responses');
  var util         = require('util');
}

var Server = Class({
  className : "Server",
  clients   : {},
  
  initialize : function() {
    var self = this;
    
    this.webSocket = WebSocket.createServer();
    this.webSocket.addListener('close'      , this.handleClose);
    this.webSocket.addListener('shutdown'   , this.handleShutdown);
    this.webSocket.addListener('connection' , function(connection) {
      self.clients[connection.id] = connection;
      
      connection.addListener('message' , function(message) {
        self.simulation.notify(JSON.parse(message));
      });
      
      util.log("Client \033[34m" + connection.id + "\033[30m connected");
      self.sendTo(connection.id , new responses['playerId'](connection.id));
    });
  },
  
  handleClose : function() {
    
  },
  
  handleShutdown : function() {
    
  },
  
  listen : function(port) {
    this.webSocket.listen(port);
    util.log('\033[32mServer started on port ' + port + '\033[30m');
  },
  
  handleMessage : function(message) {
    this.simulation.notify(JSON.parse(message));
  },
  
  sendToAll : function(message) {
    var self = this;
    
    this.clients.eachAttribute(function(id , client) {
      self.sendTo(client.id , message);
    });
  },
  
  sendToAllExcept : function(id , message) {
    var self = this;
    
    this.clients.eachAttribute(function(clientId , client) {
      if (clientId !== id) {
        self.sendTo(clientId , message);
      }
    });
  },
  
  sendTo : function(id , message) {
    this.webSocket.send(id , JSON.stringify(message));
  }
});

module.exports = Server;